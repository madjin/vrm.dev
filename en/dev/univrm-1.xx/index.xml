<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>VRM â€“ UniVRM-1.XX</title>
    <link>https://vrm.dev/en/dev/univrm-1.xx/</link>
    <description>Recent content in UniVRM-1.XX on VRM</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 21 Apr 2020 17:12:49 +0900</lastBuildDate>
    
	  <atom:link href="https://vrm.dev/en/dev/univrm-1.xx/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Outline</title>
      <link>https://vrm.dev/en/dev/univrm-1.xx/outline/</link>
      <pubDate>Tue, 21 Apr 2020 19:56:48 +0900</pubDate>
      
      <guid>https://vrm.dev/en/dev/univrm-1.xx/outline/</guid>
      <description>
        
        
        &lt;h1 id=&#34;univrm-10-draft&#34;&gt;UniVRM-1.0 draft&lt;/h1&gt;
&lt;p&gt;Unity implementation of VRM-1.0 draft.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Please do not use VRM-1.0 draft in your products until the official version is released. The current specifications may be modified/changed later on&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SupportUnityVersion: &lt;code&gt;Unity2019.3&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Recommended ColorSpaceSetting: &lt;code&gt;Linear&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;library-dependencies&#34;&gt;Library Dependencies&lt;/h2&gt;
&lt;p&gt;VrmLib&amp;rsquo;s byte array operation depends on &lt;code&gt;System.Memory&lt;/code&gt; and&lt;code&gt; System.Span&lt;/code&gt; (included in standard library starting from &lt;code&gt;.NET Standard-2.1&lt;/code&gt;)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/Assets/dotnet.system.memory/Runtime
&lt;ul&gt;
&lt;li&gt;System.Memory.dll&lt;/li&gt;
&lt;li&gt;System.Buffers.dll&lt;/li&gt;
&lt;li&gt;System.Runtime.CompilerServices.Unsafe.dll&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nuget.org/packages/System.Memory/&#34;&gt;https://www.nuget.org/packages/System.Memory/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dotnet/corefx/blob/master/LICENSE.TXT&#34;&gt;https://github.com/dotnet/corefx/blob/master/LICENSE.TXT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ProtobufSerializer&amp;rsquo;s JSON reading/writing. Depends on the JSONSerializer&amp;rsquo;s &lt;code&gt;Google.Protobuf&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/Assets/ProtobufSerializer/Google.Protobuf&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/protocolbuffers/protobuf/tree/master/csharp/src/Google.Protobuf&#34;&gt;https://github.com/protocolbuffers/protobuf/tree/master/csharp/src/Google.Protobuf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/protocolbuffers/protobuf/blob/master/LICENSE&#34;&gt;https://github.com/protocolbuffers/protobuf/blob/master/LICENSE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;implementation&#34;&gt;Implementation&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;+-------------------+
| GameObject        |
| Assets            |Left handed, Y-UP system
+-------------------+
 ^                 |
 |[UnityBuilder]   |[VrmConverter]
 |                 |
 Unity-2019.3      |
===============================================
.NET Standard-2.0 + System.Memory
 |                 |
 | Right handed,   |
 | Y-UP system     v  
+-------------------+
|VrmLib.Model       |
+-------------------+
 ^                 |
 | VrmLib          |
 |[import]         v[export]
+-------------------+
|VrmProtobuf        |
+-------------------+
 ^                 |
 | Protobuf        v
+-------------------+
|GLB(GLTF+BIN)      |VRM-1.0
+-------------------+
&lt;/code&gt;&lt;/pre&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: Structure</title>
      <link>https://vrm.dev/en/dev/univrm-1.xx/structure/</link>
      <pubDate>Tue, 21 Apr 2020 17:12:49 +0900</pubDate>
      
      <guid>https://vrm.dev/en/dev/univrm-1.xx/structure/</guid>
      <description>
        
        
        &lt;h2 id=&#34;assetsvrmlib&#34;&gt;Assets/vrmlib&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;VrmLib.Model&lt;/code&gt;: An intermediate container generated from the GLTF array buffer to make handling VRM model data easier. It can access the GLTF hierarchy in the VRM model without index referencing.&lt;/p&gt;
&lt;h2 id=&#34;assetsprotobufserializer&#34;&gt;Assets/ProtobufSerializer&lt;/h2&gt;
&lt;p&gt;VRM-1.0&amp;rsquo;s reading/writing.
Defined by ProtocolBuffer and generate a Json serializer.&lt;/p&gt;
&lt;p&gt;Transfer from VRM-1.0 to the intermediate format &lt;code&gt;VrmLib.Model&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;VRM-1.0 &amp;lt;=&amp;gt; VrmLib.Model&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;assetsvrm&#34;&gt;Assets/VRM&lt;/h2&gt;
&lt;p&gt;Add &lt;code&gt;package.json&lt;/code&gt; to reference the followings (UniVRM-0.55):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MToon shader&lt;/li&gt;
&lt;li&gt;UniUnlit shader&lt;/li&gt;
&lt;li&gt;VRM-0.X&amp;rsquo;s serializer&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;assetsunivrm0xreader&#34;&gt;Assets/UniVRM0XReader&lt;/h2&gt;
&lt;p&gt;Transfer from VRM-0.X to the intermediate format &lt;code&gt;VrmLib.Model&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;VRM-0.x =&amp;gt; VrmLib.Model&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;assetsunivrm-10&#34;&gt;Assets/UniVRM-1.0&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;VrmLib.Model &amp;lt;=&amp;gt; Unity&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Transformation between right-handed and left-handed coordinate system&lt;/li&gt;
&lt;li&gt;Must be run in ScriptThread&lt;/li&gt;
&lt;li&gt;GLTF-related (Mesh, Texture, Material, GameObject, SkinnedMeshRenderer, etc.)&lt;/li&gt;
&lt;li&gt;VRM-related (HumanoidAvatar, BlendShapeProxy, LookAt, FirstPerson, etc.)&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Employ Unity Package Manager</title>
      <link>https://vrm.dev/en/en/dev/univrm-1.xx/package/</link>
      <pubDate>Mon, 11 May 2020 17:06:05 +0900</pubDate>
      
      <guid>https://vrm.dev/en/en/dev/univrm-1.xx/package/</guid>
      <description>
        
        
        &lt;h2 id=&#34;univrm-10s-unitypackage&#34;&gt;UniVRM-1.0&amp;rsquo;s UnityPackage&lt;/h2&gt;
&lt;p&gt;UnityPackage is adopted experimentally in UniVRM-1.0.&lt;/p&gt;
&lt;p&gt;As &lt;code&gt;package.json&lt;/code&gt; is placed in each module in github repository&amp;rsquo;s &lt;code&gt;Assets&lt;/code&gt; folder,
&lt;code&gt;Unity 2019.3.4f1 or later version&lt;/code&gt; is required.&lt;/p&gt;
&lt;h3 id=&#34;how-to-use&#34;&gt;How to use&lt;/h3&gt;
&lt;p&gt;UnityPackageManager&amp;rsquo;s Window&lt;/p&gt;
&lt;img src=&#34;https://vrm.dev/images/vrm10/menu_packagemanager.jpg&#34;   /&gt;

&lt;p&gt;&lt;code&gt;add package from git URL&lt;/code&gt;&lt;/p&gt;
&lt;img src=&#34;https://vrm.dev/images/vrm10/from_git.jpg&#34;   /&gt;

&lt;p&gt;Since there is no function that can automatically download the dependencies between packages, please add the following git urls in order:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;https://github.com/vrm-c/UniVRM.git?path=/Assets/VRMShaders&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;https://github.com/vrm-c/UniVRM_1_0.git?path=/Assets/Vrm10&lt;/code&gt; =&amp;gt; Depends on VRMShaders&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;add-dependencies-in-packagesmanifestjson&#34;&gt;Add dependencies in Packages/manifest.json&lt;/h4&gt;
&lt;p&gt;An alternative way is to add necessary dependencies right in Packages/manifest.json. Please copy and paste the following contents:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
  &lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;&amp;#34;dependencies&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;...&lt;/span&gt;
    &lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;&amp;#34;com.vrmc.univrm&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;https://github.com/vrm-c/UniVRM_1_0.git?path=/Assets/Vrm10&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;&amp;#34;com.vrmc.vrmshaders&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;https://github.com/vrm-c/UniVRM.git?path=/Assets/VRMShaders&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;...&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/vrm-c/UniVRMUtility/blob/master/Packages/manifest.json&#34;&gt;https://github.com/vrm-c/UniVRMUtility/blob/master/Packages/manifest.json&lt;/a&gt; is an example of using &lt;code&gt;UniVRM-1.0&lt;/code&gt;&#39;s &lt;code&gt;UnityPackage&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The hash values in &lt;code&gt;lock&lt;/code&gt; can be updated automatically by Unity, there is no need to manually change them.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;  &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;lock&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;:&lt;/span&gt; {
    &lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;&amp;#34;com.vrmc.univrm&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;&amp;#34;revision&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;HEAD&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;&amp;#34;hash&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;198c2c605ded711b21781421e71ba9bdbe0f8728&amp;#34;&lt;/span&gt;
    },
    &lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;&amp;#34;com.vrmc.vrmshaders&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;&amp;#34;revision&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;HEAD&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;&amp;#34;hash&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;155acf354735288db0335878179f483901541851&amp;#34;&lt;/span&gt;
    }
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: BlendShapeProxy Updates</title>
      <link>https://vrm.dev/en/en/dev/univrm-1.xx/blendshapeproxy/</link>
      <pubDate>Mon, 11 May 2020 17:05:49 +0900</pubDate>
      
      <guid>https://vrm.dev/en/en/dev/univrm-1.xx/blendshapeproxy/</guid>
      <description>
        
        
        &lt;h2 id=&#34;update-order-for-blendshape-related-components&#34;&gt;Update order for BlendShape-related components&lt;/h2&gt;
&lt;p&gt;As described in &lt;a href=&#34;https://github.com/vrm-c/vrm-specification/blob/master/specification/VRMC_vrm-1.0_draft/README.md#update-order,&#34;&gt;https://github.com/vrm-c/vrm-specification/blob/master/specification/VRMC_vrm-1.0_draft/README.md#update-order,&lt;/a&gt; it is recommended to update as the following order:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Humanoid&lt;/li&gt;
&lt;li&gt;LookAt&lt;/li&gt;
&lt;li&gt;BlendShape&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;integrate-with-lookat&#34;&gt;Integrate with LookAt&lt;/h2&gt;
&lt;p&gt;To reduce the processing order problem of LookAt and BlendShape, &lt;code&gt;VRMLookAtHead&lt;/code&gt;, &lt;code&gt;VRMLookAtBoneApplyer&lt;/code&gt; and &lt;code&gt;VRMLookAtBlendShapeApplyer&lt;/code&gt; have been integrated into &lt;code&gt;VRMBlendShapeProxy&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;blendshapeclips-exclude-functions&#34;&gt;BlendShapeClip&amp;rsquo;s exclude functions&lt;/h2&gt;
&lt;p&gt;For example, when &lt;code&gt;fun&lt;/code&gt; and &lt;code&gt;blink&lt;/code&gt; are applied at the same time, there are models whose eyes become weird.
To address this issue, a function that can disable &lt;code&gt;blink&lt;/code&gt; when applying &lt;code&gt;fun&lt;/code&gt; is created. As of vrm1.0, there are three types of exclude functions:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/vrm-c/vrm-specification/blob/master/specification/VRMC_vrm-1.0_draft/README.md#blendshape-specification&#34;&gt;https://github.com/vrm-c/vrm-specification/blob/master/specification/VRMC_vrm-1.0_draft/README.md#blendshape-specification&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ignoreBlink&lt;/li&gt;
&lt;li&gt;ignoreLookAt&lt;/li&gt;
&lt;li&gt;ignoreMouth&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;setvalue-and-apply&#34;&gt;SetValue and Apply&lt;/h2&gt;
&lt;p&gt;In &lt;code&gt;UniVRM-0.X&lt;/code&gt; there are two systems &lt;code&gt;BlendShapeProxyy.SetValueImmediate&lt;/code&gt; and &lt;code&gt;BlendSahpeProxy.SetValue + Apply&lt;/code&gt;. In &lt;code&gt;UniVRM-1.X&lt;/code&gt;, &lt;code&gt;BlendShapeProxyy.SetValueImmediate&lt;/code&gt; has been removed.&lt;/p&gt;
&lt;p&gt;To make &lt;code&gt;ignoreBlink&lt;/code&gt;, etc. functional, it is necessary to accumulate the rest of the included blendshape values and then process them at once. (Initially it was designed to be stored and applied by the application side)&lt;/p&gt;
&lt;h2 id=&#34;the-timing-of-using-apply-function&#34;&gt;The timing of using Apply function&lt;/h2&gt;
&lt;h3 id=&#34;none&#34;&gt;None&lt;/h3&gt;
&lt;p&gt;Please call &lt;code&gt;Apply&lt;/code&gt; explicitly on the user application side.&lt;/p&gt;
&lt;h3 id=&#34;update&#34;&gt;Update&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Apply&lt;/code&gt; is called in VRMBlendShapeProxy.Update.&lt;/p&gt;
&lt;p&gt;Note that it is better to use VRMBlendShapeProxy.Apply when the necessary blendshape values are set.&lt;/p&gt;
&lt;h3 id=&#34;lateupdate&#34;&gt;LateUpdate&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Apply&lt;/code&gt; is called in VRMBlendShapeProxy.LateUpdate.&lt;/p&gt;
&lt;p&gt;When fine controlling is not required.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: API</title>
      <link>https://vrm.dev/en/dev/univrm-1.xx/api/</link>
      <pubDate>Tue, 21 Apr 2020 17:12:49 +0900</pubDate>
      
      <guid>https://vrm.dev/en/dev/univrm-1.xx/api/</guid>
      <description>
        
        
        &lt;p&gt;Available in &lt;a href=&#34;https://github.com/vrm-c/UniVRM_1_0/blob/master/Assets/UniVRM-1.0/PlayModeTests/ApiSampleTests.cs&#34;&gt;https://github.com/vrm-c/UniVRM_1_0/blob/master/Assets/UniVRM-1.0/PlayModeTests/ApiSampleTests.cs&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;System&lt;/span&gt;;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;System.IO&lt;/span&gt;;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;UnityEngine&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;vrm-to-model&#34;&gt;VRM to Model&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;        VrmLib.Model ReadModel(&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;string&lt;/span&gt; path)
        {
            &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;var&lt;/span&gt; bytes = File.ReadAllBytes(path);

            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (!VrmLib.Glb.TryParse(bytes, &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;out&lt;/span&gt; VrmLib.Glb glb, &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;out&lt;/span&gt; Exception ex))
            {
                Debug.LogError(&lt;span style=&#34;color:#c30&#34;&gt;$&amp;#34;fail to Glb.TryParse: {path} =&amp;gt; {ex}&amp;#34;&lt;/span&gt;);
                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;null&lt;/span&gt;;
            }

            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// both VRM-0.X and VRM-1.0
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;var&lt;/span&gt; model = UniVRM10.VrmLoader.CreateVrmModel(path); 
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; model;
        }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;this-is-possible-on-a-thread&#34;&gt;This is possible on a thread&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; Task.Run(()=&amp;gt;{
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; ReadModel(path);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;model-to-gameobject&#34;&gt;Model to GameObject&lt;/h2&gt;
&lt;p&gt;This requires a ScriptThread.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;        ModelAsset BuildGameObject(VrmLib.Model model, &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;bool&lt;/span&gt; showMesh)
        {
            &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;var&lt;/span&gt; importer = &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; UniVRM10.RuntimeUnityBuilder();
            &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;var&lt;/span&gt; assets = importer.ToUnityAsset(model, showMesh);
            UniVRM10.ComponentBuilder.Build10(model, importer, assets);
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; assets;
        }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;set-renderer-after-importing-the-model&#34;&gt;Set renderer after importing the model&lt;/h3&gt;
&lt;p&gt;Various assets now are stored in ModelAsset.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;            &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;var&lt;/span&gt; asset = BuildGameObject(srcModel, &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;false&lt;/span&gt;);

            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// renderer setting
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;var&lt;/span&gt; render &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;in&lt;/span&gt; asset.Renderers)
            {
                &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// show when RuntimeUnityBuilder.ToUnity(showMesh = false)
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;                render.enabled = &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;true&lt;/span&gt;;
                &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// avoid culling
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (render &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;is&lt;/span&gt; SkinnedMeshRenderer skinned)
                {
                    skinned.updateWhenOffscreen = &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;true&lt;/span&gt;;
                }
            }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;tackle-on-frame-rate-dropping-todo&#34;&gt;Tackle on frame rate dropping (TODO)&lt;/h3&gt;
&lt;p&gt;Optimize the processing of each frame to reduce spikes.&lt;/p&gt;
&lt;h2 id=&#34;gameobject-to-model&#34;&gt;GameObject to Model&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;        VrmLib.Model ToModel(UnityEngine.GameObject target)
        {
            &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;var&lt;/span&gt; exporter = &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; UniVRM10.RuntimeVrmConverter();
            &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;var&lt;/span&gt; model = exporter.ToModelFrom10(target);
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; model;
        }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;model-to-vrm&#34;&gt;Model to VRM&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;        &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;byte&lt;/span&gt;[] ToVrm10(VrmLib.Model model)
        {
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// transform to right-handed coordinate system
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;            VrmLib.ModelExtensionsForCoordinates.ConvertCoordinate(model, VrmLib.Coordinates.Gltf);
            &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;var&lt;/span&gt; bytes = Vrm10.ModelExtensions.ToGlb(model);
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; bytes;
        }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: API Changes</title>
      <link>https://vrm.dev/en/dev/univrm-1.xx/api_update_from_univrm-0.xx/</link>
      <pubDate>Tue, 21 Apr 2020 17:12:49 +0900</pubDate>
      
      <guid>https://vrm.dev/en/dev/univrm-1.xx/api_update_from_univrm-0.xx/</guid>
      <description>
        
        
        &lt;h2 id=&#34;import&#34;&gt;Import&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The class &lt;code&gt;VRM.VRMImporterContext&lt;/code&gt;, which is used to import VRM data (&lt;code&gt;UniGLTF.ImporterContext.Load&lt;/code&gt;), has been removed. In UniVRM-1.XX the UniVRM importer will first store the VRM data (&lt;code&gt;UniVRM10.VrmLoader.CreateVrmModel&lt;/code&gt;) in &lt;code&gt;VrmLib.Model&lt;/code&gt; then port to Unity&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UniVRM10.UnityBuilder.ToUnityAsset&lt;/code&gt; will transfer the data from &lt;code&gt;VrmLib.Model&lt;/code&gt; to Unity Asset. &lt;code&gt;UniGLTF.ImporterContext.ShowMeshes&lt;/code&gt; in 0.XX has been changed to a bool parameter of &lt;code&gt;ToUnityAsset&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UniVRM10.ComponentBuilder.Build10&lt;/code&gt; will set up components (Meta, BlendShape, LookAt, etc.) for the VRM GameObject&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;System&lt;/span&gt;;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;System.IO&lt;/span&gt;;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;UnityEngine&lt;/span&gt;;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;MyClass&lt;/span&gt; : MonoBehaviour
    {
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// ...
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;         * VRM import
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;         *
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;         * @return vrm object
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;         */&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; GameObject Import()
        {
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// file path
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;var&lt;/span&gt; path = &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;../YourModel.vrm&amp;#34;&lt;/span&gt;;
            &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;var&lt;/span&gt; model = UniVRM10.VrmLoader.CreateVrmModel(path);

            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// build UniVRM-0.XX model&amp;#39;s components
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;var&lt;/span&gt; assets = UniVRM10.RuntimeUnityBuilder.ToUnityAsset(model, showMesh: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;false&lt;/span&gt;);
            
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// enable renderer when RuntimeUnityBuilder.ToUnity(showMesh = false)
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;var&lt;/span&gt; renderer &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;in&lt;/span&gt; assets.Renderers)
            {
                renderer.enabled = &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;true&lt;/span&gt;;             
                &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// avoid culling
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (renderer &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;is&lt;/span&gt; SkinnedMeshRenderer skinned)
                {
                    skinned.updateWhenOffscreen = &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;true&lt;/span&gt;;
                }
            }

            UniVRM10.ComponentBuilder.Build10(model, assets);
            &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;var&lt;/span&gt; vrmObject = assets.Root; ã€€ã€€ã€€ã€€ã€€ã€€ 

            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; vrmObject;
        }

        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// ...
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;export&#34;&gt;Export&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The class &lt;code&gt;VRM.VRMExporter&lt;/code&gt;, which is used to export VRM data (&lt;code&gt;UniGLTF.gltfExporter.Export&lt;/code&gt;), has been removed. In UniVRM-1.XX the UniVRM exporter will first transfer the VRM data (&lt;code&gt;RuntimeVrmConverter.ToModelFrom10&lt;/code&gt;) from the VRM GameObject to &lt;code&gt;VrmLib.Model&lt;/code&gt; then save to VRM file&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Vrm10.ModelExtensions.ToGlb&lt;/code&gt; will transfer the data from &lt;code&gt;VrmLib.Model&lt;/code&gt; to glb. Note that glb format is exchangeable with VRM. The coordinate transformation between Unity and GLTF is &lt;code&gt;VrmLib.ModelExtensionsForCoordinates.ConvertCoordinate&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;example-1&#34;&gt;Example&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;System&lt;/span&gt;;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;System.IO&lt;/span&gt;;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;UnityEngine&lt;/span&gt;;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;MyClass&lt;/span&gt; : MonoBehaviour
    {
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// ...
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;         * VRM export
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;         */&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;void&lt;/span&gt; Export()
        {
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// file path
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;var&lt;/span&gt; importPath = &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;../YourModel.vrm&amp;#34;&lt;/span&gt;;
            &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;var&lt;/span&gt; importedModel = UniVRM10.VrmLoader.CreateVrmModel(importPath);
            &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;var&lt;/span&gt; assets = UniVRM10.RuntimeUnityBuilder.ToUnityAsset(importedModel);
            UniVRM10.ComponentBuilder.Build10(importedModel, assets);ã€€
            
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// export with UniVRM1.0
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;var&lt;/span&gt; exporter = &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; UniVRM10.RuntimeVrmConverter();
            &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;var&lt;/span&gt; model = exporter.ToModelFrom10(assets.Root);

            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// transform to right-handed coordinate system
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;            VrmLib.ModelExtensionsForCoordinates.ConvertCoordinate(model, VrmLib.Coordinates.Gltf);
            &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;var&lt;/span&gt; exportedBytes = Vrm10.ModelExtensions.ToGlb(model);
            
            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// write out VRM1.0 file
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;var&lt;/span&gt; path = &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;vrm10.vrm&amp;#34;&lt;/span&gt;;
            File.WriteAllBytes(path, exportedBytes);
        }

        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// ...
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;lookat&#34;&gt;LookAt&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;LookAt related classes &lt;code&gt;VRM.VRMLookAtBoneApplyer&lt;/code&gt;, &lt;code&gt;VRM.VRMLookAtBlendShapeApplyer&lt;/code&gt; and &lt;code&gt;VRM.VRMLookAtHead&lt;/code&gt; has been integrated into &lt;code&gt;UniVRM10.VRMController&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;VRM.LookAtType&lt;/code&gt; has been changed to &lt;code&gt;UniVRM10.VRMController.LookAtTypes&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;VRMLookAtHead.Target&lt;/code&gt; has been replaced with &lt;code&gt;VRMController.Gaze&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Added &lt;code&gt;UniVRM10.VRMController.LookAtTargetTypes&lt;/code&gt;. You can choose to get yaw/pitch angle relative to head automatically or specify yaw/pitch angle&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;example-2&#34;&gt;Example&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;System&lt;/span&gt;;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;System.IO&lt;/span&gt;;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;UnityEngine&lt;/span&gt;;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;UniVRM10&lt;/span&gt;;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;MyClass&lt;/span&gt; : MonoBehaviour
    {
&lt;span style=&#34;color:#309&#34;&gt;        [SerializeField]&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;private&lt;/span&gt; GameObject _vrmModel;
&lt;span style=&#34;color:#309&#34;&gt;        
&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;        [SerializeField]&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;private&lt;/span&gt; GameObject _targetObject;

        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// ...
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;void&lt;/span&gt; SpecifyLookAtTarget()
        {
            &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;var&lt;/span&gt; proxy = _vrmModel.GetComponent&amp;lt;VRMController&amp;gt;();
            proxy.LookAtTargetType = VRMController.LookAtTargetTypes.CalcYawPitchToGaze;

            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// specify LookAt target
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;            _vrmModel.GetComponent&amp;lt;VRMController&amp;gt;().Gaze = _targetObject.transform;

            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// get yaw/pitch angle relative to head
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;var&lt;/span&gt; (yaw, pitch) = proxy.GetLookAtYawPitch();
        }

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;void&lt;/span&gt; SpecifyYawPitchAngle()
        {
            &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;var&lt;/span&gt; proxy = _vrmModel.GetComponent&amp;lt;VRMController&amp;gt;();
            proxy.LookAtTargetType = VRMController.LookAtTargetTypes.SetYawPitch;

            &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// specify yaw/pitch angle
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;            proxy.SetLookAtYawPitch(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;);
        }

        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// ...
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: How to export</title>
      <link>https://vrm.dev/en/dev/univrm-1.xx/how_to_export/</link>
      <pubDate>Tue, 21 Apr 2020 17:12:49 +0900</pubDate>
      
      <guid>https://vrm.dev/en/dev/univrm-1.xx/how_to_export/</guid>
      <description>
        
        
        &lt;p&gt;The export procedure has a slight change from the UniVRM-0.XX:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The model should be placed at the origin and face towards +Z(axis) direction. If necessary, please make the model as T-pose manually. Force &lt;code&gt;T-Pose&lt;/code&gt; feature has been removed in UniVRM-1.XX&lt;/li&gt;
&lt;li&gt;Right click the selected model in Hierarchy window and select [UniVRM-1.0.0] - [Export VRM]. The export window will then prompt&lt;/li&gt;
&lt;li&gt;In the export window, click &lt;code&gt;Export&lt;/code&gt; button&lt;/li&gt;
&lt;li&gt;Select a file path you want to save your model in the dialog&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The selected model can be judged whether it can be exported as VRM format in the export window. The exportable VRM model must fulfill requirements below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An Animator component has been added and a Humanoid avatar has been set to the root (a.k.a. topmost parent) of the VRM game object&lt;/li&gt;
&lt;li&gt;Entered the information in the following three necessary items in Meta
&lt;ul&gt;
&lt;li&gt;Title&lt;/li&gt;
&lt;li&gt;Version&lt;/li&gt;
&lt;li&gt;Authors&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Load VRM model made from VRM-0.X</title>
      <link>https://vrm.dev/en/dev/univrm-1.xx/load_vrm-0.x_model/</link>
      <pubDate>Tue, 21 Apr 2020 17:12:49 +0900</pubDate>
      
      <guid>https://vrm.dev/en/dev/univrm-1.xx/load_vrm-0.x_model/</guid>
      <description>
        
        
        &lt;h2 id=&#34;about-meta-conversion&#34;&gt;About Meta Conversion&lt;/h2&gt;
&lt;p&gt;The VRM-0.X model will be converted to VRM1.0 at import.&lt;/p&gt;
&lt;p&gt;TODO:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Keep the same items&lt;/li&gt;
&lt;li&gt;New items are default to &lt;code&gt;Usage&lt;/code&gt; false&lt;/li&gt;
&lt;li&gt;Items whose contents changed in VRM1.0 are default to &lt;code&gt;Usage&lt;/code&gt; false&lt;/li&gt;
&lt;li&gt;Redistribution-related is &lt;code&gt;OtherURL&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Unity Assets Handling Changes</title>
      <link>https://vrm.dev/en/dev/univrm-1.xx/unity_assets/</link>
      <pubDate>Tue, 21 Apr 2020 17:12:49 +0900</pubDate>
      
      <guid>https://vrm.dev/en/dev/univrm-1.xx/unity_assets/</guid>
      <description>
        
        
        &lt;p&gt;In UniVRM1.XX, we adopt &lt;a href=&#34;https://docs.unity3d.com/ScriptReference/Experimental.AssetImporters.ScriptedImporter.html&#34;&gt;ScriptedImporter&lt;/a&gt;, which has different asset handling behaviors compared with &lt;a href=&#34;https://docs.unity3d.com/ScriptReference/AssetPostprocessor.html&#34;&gt;AssetPostprocessor&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;0xx&#34;&gt;0.xx&lt;/h2&gt;
&lt;p&gt;Put &lt;code&gt;model.vrm&lt;/code&gt; in the Assets folder =&amp;gt; AssetPostprocessor is triggered for files with extension &lt;code&gt;.vrm&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Extract Texture from vrm&lt;/li&gt;
&lt;li&gt;Extract Material from vrm&lt;/li&gt;
&lt;li&gt;Extract Mesh from vrm vrm&lt;/li&gt;
&lt;li&gt;Extract BlendShape from vrm&lt;/li&gt;
&lt;li&gt;Construct Prefab from the extracted assets&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Many assets are generated in the Assets folder:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;model.vrm&lt;/li&gt;
&lt;li&gt;model.vrm.meta&lt;/li&gt;
&lt;li&gt;model.prefab&lt;/li&gt;
&lt;li&gt;model.prefab.meta&lt;/li&gt;
&lt;li&gt;model.Materials.meta&lt;/li&gt;
&lt;li&gt;model.Materials/*.assets&lt;/li&gt;
&lt;li&gt;model.Materials/*.meta&lt;/li&gt;
&lt;li&gt;&amp;hellip;etc&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;10&#34;&gt;1.0&lt;/h2&gt;
&lt;p&gt;Put &lt;code&gt;model.vrm&lt;/code&gt; in the Assets folder =&amp;gt; ScriptedImporter is triggered for files with extension &lt;code&gt;.vrm&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ScriptedImporter asset can be created&lt;/li&gt;
&lt;li&gt;Extracted textures from vrm will be a sub-asset of ScriptedImporter&amp;rsquo;s asset(readonly)&lt;/li&gt;
&lt;li&gt;Extracted materials from vrm will be a sub-asset of ScriptedImporter&amp;rsquo;s asset(readonly)&lt;/li&gt;
&lt;li&gt;Extracted meshes from vrm will be a sub-asset of ScriptedImporter&amp;rsquo;s asset(readonly)&lt;/li&gt;
&lt;li&gt;Extracted blendshapes from vrm will be a sub-asset of ScriptedImporter&amp;rsquo;s asset(readonly)&lt;/li&gt;
&lt;li&gt;Construct Prefab from extracted assets and make it as a sub-asset of ScriptedImporter&amp;rsquo;s asset(readonly)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Only one asset is generated in the Assets folder:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;model.vrm&lt;/li&gt;
&lt;li&gt;model.vrm.meta&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;extract&#34;&gt;Extract&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ScriptedImporter&lt;/code&gt; asset cannot be modified with readonly state.
To make it modifiable, select components you want to extract and click &lt;code&gt;Extract&lt;/code&gt; button in the Prefab&amp;rsquo;s inspector window (same as &lt;code&gt;Extract&lt;/code&gt; in fbx importer)
&lt;code&gt;Extract&lt;/code&gt; is not required if there is no intention to modify it.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: UniVRM Import/Export Examples</title>
      <link>https://vrm.dev/en/dev/univrm-1.xx/use_vrm/</link>
      <pubDate>Tue, 21 Apr 2020 17:12:49 +0900</pubDate>
      
      <guid>https://vrm.dev/en/dev/univrm-1.xx/use_vrm/</guid>
      <description>
        
        
        &lt;h2 id=&#34;editorimport&#34;&gt;EditorImport&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Import VRM and generate its prefab&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;editorexport&#34;&gt;EditorExport&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Export VRM made from the scene in Editor mode&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;runtimeimport&#34;&gt;RunTimeImport&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vrm-c/UniVRMUtility&#34;&gt;https://github.com/vrm-c/UniVRMUtility&lt;/a&gt; SimpleViewer, VRMViewer&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;runtimeexport&#34;&gt;RuntimeExport&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vrm-c/UniVRMUtility&#34;&gt;https://github.com/vrm-c/UniVRMUtility&lt;/a&gt; PrimMan. Export box man as VRM format through the program at runtime&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: UniVRM-1.XX and UniVRM-0.XX coexistence</title>
      <link>https://vrm.dev/en/dev/univrm-1.xx/use_with_univrm-0.xx/</link>
      <pubDate>Tue, 21 Apr 2020 17:12:49 +0900</pubDate>
      
      <guid>https://vrm.dev/en/dev/univrm-1.xx/use_with_univrm-0.xx/</guid>
      <description>
        
        
        &lt;p&gt;Both UniVRM-1.XX and UniVRM-0.XX importers work.&lt;/p&gt;
&lt;p&gt;The uniVRM-0.XX importer can be stopped by defining the c# symbol &lt;code&gt;VRM_STOP_ASSETPOSTPROCESSOR&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go to &lt;code&gt;Edit&lt;/code&gt; -&amp;gt; &lt;code&gt;preference&lt;/code&gt; -&amp;gt; &lt;code&gt;UniVRM&lt;/code&gt; and check &lt;code&gt;StopVrmAssetPostProcessor&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go to &lt;code&gt;Edit&lt;/code&gt; -&amp;gt; &lt;code&gt;project settings&lt;/code&gt; -&amp;gt; &lt;code&gt;other settings&lt;/code&gt; -&amp;gt; &lt;code&gt;Scripting Define Symbols&lt;/code&gt; and add &lt;code&gt;VRM_STOP_ASSETPOSTPROCESSOR&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
