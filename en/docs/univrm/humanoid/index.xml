<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>VRM – Humanoid</title>
    <link>https://vrm.dev/en/docs/univrm/humanoid/</link>
    <description>Recent content in Humanoid on VRM</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 06 Aug 2020 18:09:15 +0900</lastBuildDate>
    
	  <atom:link href="https://vrm.dev/en/docs/univrm/humanoid/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Humanoid Overview</title>
      <link>https://vrm.dev/en/docs/univrm/humanoid/humanoid_overview/</link>
      <pubDate>Fri, 18 Sep 2020 13:02:07 +0900</pubDate>
      
      <guid>https://vrm.dev/en/docs/univrm/humanoid/humanoid_overview/</guid>
      <description>
        
        
        &lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;VRM humanoid is compatible with the motion of MotionCapture&amp;rsquo;s FK (Forward Kinematics).&lt;/p&gt;
&lt;p&gt;The motion for one frame has the information described below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The Translation for Hips bone&lt;/li&gt;
&lt;li&gt;The Rotation for each bone&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To reproduce the same pose in the Unity Scene (transferring data to a GameObject containing humanoid structure), the following conditions need to be satisfied:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Each bone (hips, spine, chest&amp;hellip;) corresponds to its humanoid skeleton in GLTF Node (Unity GameObject)&lt;/li&gt;
&lt;li&gt;The Bones&amp;rsquo; parent-child relationships are known.&lt;/li&gt;
&lt;li&gt;T-Pose must be the initial pose&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Note&lt;/h4&gt;

    If the ratio (e.g. crotch - knee - ankle) is uncommon, the same pose cannot be reproduced.

&lt;/div&gt;

&lt;p&gt;The creation of humanoid avatar is pretty much the same as the original:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.unity3d.com/Manual/AvatarCreationandSetup.html&#34;&gt;https://docs.unity3d.com/Manual/AvatarCreationandSetup.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In addition, to make it easier to handle in the program, VRM Humanoid has the following features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For the initial pose, all the Gltf Nodes (Unity GameObject) have no rotation&lt;/li&gt;
&lt;li&gt;No scaling changes&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;t-pose&#34;&gt;T-Pose&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;img src=&#34;https://vrm.dev/images/vrm/T_pose.png&#34; alt=&#34;T_pose&#34;  /&gt;
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;T-Pose example&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;Palm faces downward, and it is parallel to the ground along x axis&lt;/li&gt;
&lt;li&gt;Thumb is parallel to the ground half way 45 degrees between x and z axis (the perspective view from the top)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;unity-humanoid&#34;&gt;Unity Humanoid&lt;/h2&gt;
&lt;p&gt;In Unity, there is an object called &lt;code&gt;Avatar&lt;/code&gt;, which can be used to set up the model in humanoid mode.
Since the Humanoid Avatar settings are part of &lt;code&gt;fbx importer&lt;/code&gt;, basically the model with Humanoid Avatar from data other than fbx cannot be created.
However, we can still create the Humanoid Avatar via program. See &lt;a href=&#34;https://vrm.dev/en/docs/univrm/humanoid/meshutility_humanoid/&#34;&gt;humanoid component&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;compatible-with-bvh&#34;&gt;Compatible with BVH&lt;/h2&gt;
&lt;p&gt;Compatible with BVH that has the initial pose as &lt;code&gt;T-Pose&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Substitute the translation value into hips&lt;/li&gt;
&lt;li&gt;Substitute the relative rotation value into its child&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;details&#34;&gt;Details&lt;/h2&gt;
&lt;p&gt;For the list of human bones, please refer to:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.unity3d.com/2019.4/Documentation/ScriptReference/HumanBodyBones.html&#34;&gt;https://docs.unity3d.com/2019.4/Documentation/ScriptReference/HumanBodyBones.html&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Target nodes not containing skinning (GLTF skin, joint and Unity SkinnedMeshRenderer, etc.) can be selected&lt;/li&gt;
&lt;li&gt;All required bones must be included&lt;/li&gt;
&lt;li&gt;The Bone&amp;rsquo;s parent-child relationship follows the humanoid definition (The first ancestor bone found in LowerLeg is UpperLeg etc.)&lt;/li&gt;
&lt;li&gt;The parent-child relationships for hips as root are described below. Bones that are in parentheses are non-required bones (optional):
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;hips - spine - chest - (upper chest) - neck - head&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[Branch] from head - left - (eye)&lt;/li&gt;
&lt;li&gt;[Branch] from head - right - (eye)&lt;/li&gt;
&lt;li&gt;[Branch] from chest or upper chest - left - (shoulder) - upper arm - lower arm - hand - (fingers)&lt;/li&gt;
&lt;li&gt;[Branch] from chest or upper chest - right - (shoulder) - upper arm - lower arm - hand - (fingers)&lt;/li&gt;
&lt;li&gt;[Branch] from hips - left - upper leg - lower leg - foot - (toes)&lt;/li&gt;
&lt;li&gt;[Branch] from hips - right - upper leg - lower leg - foot - (toes)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Inserting non-bone objects between humanoid bones is allowable (e.g., LowerLeg’s parent is a Cube GameObject and this Cube’s parent is UpperLeg, etc.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Non-required bones can be skipped (UpperArm&amp;rsquo;s parent can be chest instead of shoulder)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;related-issues&#34;&gt;Related Issues&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vrm-c/vrm-specification/issues/87&#34;&gt;https://github.com/vrm-c/vrm-specification/issues/87&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blogs.unity3d.com/jp/2014/05/26/mecanim-humanoids/&#34;&gt;Mecanim Humanoids&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/ousttrue/items/aead1c943855561b62e7&#34;&gt;BlenderからUnityのHumanoid互換でfbxをエクスポートする&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;supplementary-information-regarding-t-pose&#34;&gt;Supplementary Information regarding T-Pose&lt;/h2&gt;
&lt;p&gt;To normalize a model, the model with T-Pose is required.&lt;/p&gt;
&lt;p&gt;If the model doesn&amp;rsquo;t have T-Pose, you can make a T-Pose by doing any of the followings:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Click &lt;code&gt;Menu&lt;/code&gt; on top and select &lt;code&gt;Export humanoid&lt;/code&gt; from &lt;code&gt;VRM&lt;/code&gt; -&amp;gt; &lt;code&gt;UniVRM-0.XX&lt;/code&gt; -&amp;gt; &lt;code&gt;Export humanoid&lt;/code&gt;. The export dialog will pop up. Enable &lt;code&gt;force T-Pose&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Make T-Pose for the model by manually adjusting the rotation of the arm etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If the T-Pose made by the first option (automatic T-Pose) didn&amp;rsquo;t go well, try to make T-Pose manually.&lt;/p&gt;
&lt;p&gt;Also, if a model&amp;rsquo;s normalization have been done once before, please avoid re-normalizing the model as much as you can as the accuracy may gradually deviate from standard.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Force T-Pose&lt;/code&gt; option will be unchecked by default if the model&amp;rsquo;s normalization was already done before. That being said, the system will detect whether the model contain Meta component.&lt;/p&gt;
&lt;h2 id=&#34;common-issues&#34;&gt;Common Issues&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Jaw&amp;rsquo;s position is incorrect: during T-Pose process, there is a possibility that the jaw&amp;rsquo;s position is different than before. If this is the case, please remove &lt;code&gt;jaw&lt;/code&gt; (chin) bone setting from the model&amp;rsquo;s (FBX) &lt;code&gt;Import setting&lt;/code&gt; -&amp;gt; &lt;code&gt;Rig&lt;/code&gt;. There is no influence on model if jaw bone is not used&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Facial parts (bangs, etc.) have weird movements: during T-Pose process, there is a possibility that the jaw&amp;rsquo;s position is different than before. That is, facial parts (e.g. bangs) are mis-recognized as jaw and being assigned to Jaw bone. As such, bangs&amp;rsquo; movements become weird due to this issue. Please remove &lt;code&gt;jaw&lt;/code&gt; bone setting from the model&amp;rsquo;s (FBX) &lt;code&gt;Import setting&lt;/code&gt; -&amp;gt; &lt;code&gt;Rig&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Create Base VRM Model</title>
      <link>https://vrm.dev/en/docs/univrm/humanoid/base_model/</link>
      <pubDate>Wed, 14 Oct 2020 17:46:52 +0900</pubDate>
      
      <guid>https://vrm.dev/en/docs/univrm/humanoid/base_model/</guid>
      <description>
        
        
        &lt;p&gt;The target &lt;code&gt;GameObject&lt;/code&gt; can be exported as VRM if the following two conditions are fulfilled:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Animator&lt;/code&gt; component is attached&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Animator&#39;s HumanoidAvatar&lt;/code&gt; is set up&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;fbx&#34;&gt;FBX&lt;/h2&gt;
&lt;p&gt;To meet the conditions described above for an imported fbx, set the fbx model as &lt;code&gt;humanoid&lt;/code&gt; from &lt;code&gt;Import Settings -&amp;gt; Rig -&amp;gt; Animation Type&lt;/code&gt;.
After &lt;code&gt;humanoid&lt;/code&gt; type is applied, &lt;code&gt;Animator&lt;/code&gt; component with &lt;code&gt;HumanoidAvatar&lt;/code&gt; will be attached to the fbx&amp;rsquo;s prefab.&lt;/p&gt;
&lt;p&gt;To convert the fbx model to &lt;code&gt;humanoid&lt;/code&gt; type successfully:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All &lt;a href=&#34;https://github.com/vrm-c/vrm-specification/blob/master/specification/0.0/README.md#defined-bones&#34;&gt;required bones&lt;/a&gt; are included&lt;/li&gt;
&lt;li&gt;Bones&amp;rsquo; parent-child relationships are correct (e.g. hips -&amp;gt; leg -&amp;gt; foot. not the other way around).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;No restrictions on bone naming.&lt;/p&gt;
&lt;h2 id=&#34;modify-fbx-in-the-scene&#34;&gt;Modify FBX in the scene&lt;/h2&gt;
&lt;p&gt;You can modify fbx&amp;rsquo;s GameObject by&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;adding children GameObjects to Parent GameObjects&lt;/li&gt;
&lt;li&gt;disabling GameObjects&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you want to change the hierarchy structure, please refer to &lt;code&gt;HumanoidComponent&lt;/code&gt;, which is described in the next section.&lt;/p&gt;
&lt;h2 id=&#34;create-humanoidavatar-manually-from-gameobject&#34;&gt;Create HumanoidAvatar manually from GameObject&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;HumanoidAvatar&lt;/code&gt; can be created without using &lt;code&gt;fbx importer&lt;/code&gt;.
Check out &lt;a href=&#34;https://vrm.dev/en/docs/univrm/humanoid/meshutility_humanoid/&#34;&gt;Humanoid Component&lt;/a&gt; for more details.&lt;/p&gt;
&lt;p&gt;If the following types of models are in the scene:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Humanoid model in GLTF format&lt;/li&gt;
&lt;li&gt;Humanoid-like model made by cubes and so on&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;code&gt;HumanoidAvatar&lt;/code&gt; can be created as long as each required bone is assigned accordingly based on the object in Hierarchy.
Finally, to export the target &lt;code&gt;GameObject&lt;/code&gt; as VRM, attach &lt;code&gt;Animator&lt;/code&gt; component and assign the created &lt;code&gt;HumanoidAvatar&lt;/code&gt; to &lt;code&gt;Avatar&lt;/code&gt; field.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Humanoid Component</title>
      <link>https://vrm.dev/en/docs/univrm/humanoid/meshutility_humanoid/</link>
      <pubDate>Thu, 15 Oct 2020 18:23:26 +0900</pubDate>
      
      <guid>https://vrm.dev/en/docs/univrm/humanoid/meshutility_humanoid/</guid>
      <description>
        
        
        &lt;p&gt;&lt;code&gt;UniVRM-0.60.0~&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;A humanoid avatar can be created directly from the Scene without fbx.&lt;/p&gt;
&lt;h1 id=&#34;how-to-use&#34;&gt;How to use&lt;/h1&gt;
&lt;p&gt;Prepare a rigged model in the scene.&lt;/p&gt;
&lt;p&gt;We will take the model in the following link as an example:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/RiggedFigure/glTF-Binary&#34;&gt;https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/RiggedFigure/glTF-Binary&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;First, import &lt;code&gt;RiggedFigure.glb&lt;/code&gt; into the &lt;code&gt;Assets&lt;/code&gt; folder.
If UniVRM package is installed, the &lt;code&gt;Prefab&lt;/code&gt; file can be automatically generated from the imported &lt;code&gt;glb&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Drag the &lt;code&gt;Prefab&lt;/code&gt; file to the &lt;code&gt;Hierarchy&lt;/code&gt; window. A GameObject associated with this &lt;code&gt;Prefab&lt;/code&gt; is instantiated.&lt;/p&gt;
&lt;p&gt;Click on the GameObject in the &lt;code&gt;Hierarchy&lt;/code&gt; window, then add a humanoid component (&lt;code&gt;Inspector -&amp;gt; Add Component -&amp;gt; Humanoid&lt;/code&gt;).&lt;/p&gt;
&lt;img src=&#34;https://vrm.dev/images/vrm/bone_required.jpg&#34;   /&gt;

&lt;p&gt;As shown in the image above, assign required bones.&lt;/p&gt;
&lt;img src=&#34;https://vrm.dev/images/vrm/create_avatar.jpg&#34;   /&gt;

&lt;p&gt;Press &lt;code&gt;Create UnityEngine.Avatar&lt;/code&gt; button.&lt;/p&gt;
&lt;img src=&#34;https://vrm.dev/images/vrm/humanoid_animator.jpg&#34;   /&gt;

&lt;p&gt;Now a humanoid avatar is created. You can make a T-pose for the model and convert it to VRM.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
