<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>VRM – detail</title>
    <link>https://vrm.dev/tags/detail/</link>
    <description>Recent content in detail on VRM</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 16 Sep 2020 15:43:09 +0900</lastBuildDate>
    
	  <atom:link href="https://vrm.dev/tags/detail/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: ヒューマノイド概要</title>
      <link>https://vrm.dev/docs/univrm/humanoid/humanoid_overview/</link>
      <pubDate>Wed, 16 Sep 2020 15:43:09 +0900</pubDate>
      
      <guid>https://vrm.dev/docs/univrm/humanoid/humanoid_overview/</guid>
      <description>
        
        
        &lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;
&lt;p&gt;VRMのヒューマノイドは、主にモーションキャプチャーの Forward kinematics のモーションを受けられることを基準に決めました。&lt;/p&gt;
&lt;p&gt;１フレームのモーション(ポーズ)は以下の情報で表される想定です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;hipsボーンの移動値&lt;/li&gt;
&lt;li&gt;各ボーンの回転値&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ある Gltf Scene (Unity Hierarhcy) がこのデータを受けて同じポーズを再現するには以下の条件必要です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Gltf Node (Unity GameObject) とボーン(hips, spine, chest&amp;hellip;)の対応が分かっている&lt;/li&gt;
&lt;li&gt;ボーンの親子関係が決まっている&lt;/li&gt;
&lt;li&gt;ポーズを受ける前の姿勢が決まっている =&amp;gt; T-Pose&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;備考&lt;/h4&gt;

    細かく言えば、ボーンの長さが違うと同じポーズになりません。
これを解決する技術を、リターゲットと言いますが VRM では特に指定していません。
例えば、股-膝-足首-踵 の比率が違うと地面に対してすべります。

&lt;/div&gt;

&lt;p&gt;Unity の HumanoidAvatar を元に決めたのでだいたい同じです。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.unity3d.com/Manual/AvatarCreationandSetup.html&#34;&gt;https://docs.unity3d.com/Manual/AvatarCreationandSetup.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;さらに、プログラムでの扱いを簡単にするために&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;すべての Gltf Node (Unity GameObject) の回転を0にしたときに初期ポーズになる&lt;/li&gt;
&lt;li&gt;スケールは変化しない&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;を追加したものが VRM のヒューマノイドです。&lt;/p&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;備考&lt;/h4&gt;

    特にスケールは難しい問題で、スケール中心が原点以外、負のスケール、XYZ別々のスケールなどを考慮したプログラム書くのは大変な負担となります。

&lt;/div&gt;

&lt;h2 id=&#34;t-pose&#34;&gt;T-Pose&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;img src=&#34;https://vrm.dev/images/vrm/T_pose.png&#34; alt=&#34;T_pose&#34;  /&gt;
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;T-Poseの例&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;腕と手の指についても規約があります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;手の平は下向き&lt;/li&gt;
&lt;li&gt;親指は水平でXZ平面(上から見て)45度&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;unityのヒューマノイド&#34;&gt;Unityのヒューマノイド&lt;/h2&gt;
&lt;p&gt;Unity では、 Avatar というオブジェクトがあります。
これを、 Humanoid モードに設定できます。
Avatar は Unity の オブジェクトですが、Humanoid Avatar の設定画面は &lt;code&gt;fbx importer&lt;/code&gt; の一部です。
このため、 fbx 以外のデータから Humanoid Avatar のあるモデルを作れません。
ただし、Program から Humanoid Avatar を作成する関数はあるので、
UniVRMは Humanoid Avatar を作成できます。 &lt;a href=&#34;https://vrm.dev/docs/univrm/humanoid/meshutility_humanoid/&#34;&gt;humanoid component&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;互換性のあるbvh&#34;&gt;互換性のあるBVH&lt;/h2&gt;
&lt;p&gt;初期姿勢が、 &lt;code&gt;T-Pose&lt;/code&gt; であるBVHと互換性があります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;hips に移動値を代入して&lt;/li&gt;
&lt;li&gt;hips から子に向かって ローカル回転を代入します&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;詳細&#34;&gt;詳細&lt;/h2&gt;
&lt;p&gt;ボーンの一覧は、&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.unity3d.com/ja/2019.4/ScriptReference/HumanBodyBones.html&#34;&gt;https://docs.unity3d.com/ja/2019.4/ScriptReference/HumanBodyBones.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;と同じです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;対象となるノードはスキニング(GLTFのskinおよびjoint、UnityのSkinnedMeshRendererなど)とは無関係に選択できる&lt;/li&gt;
&lt;li&gt;必須のボーンがすべて含まれている&lt;/li&gt;
&lt;li&gt;ボーンの親子関係がヒューマノイドの定義を守っている(LowerLegの最初に見つかる祖先ボーンがUpperLegであるなど)&lt;/li&gt;
&lt;li&gt;hipsをrootに以下の親子関係。カッコは必須でないボーン
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;hips - spine - chest - (upper chest) - neck - head&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;headからleft - (eye)&lt;/li&gt;
&lt;li&gt;headからright - (eye)&lt;/li&gt;
&lt;li&gt;chestまたはupper chestからleft - (shoulder) - upper arm - lower arm - hand - (fingers)&lt;/li&gt;
&lt;li&gt;chestまたはupper chestからright - (shoulder) - upper arm - lower arm - hand - (fingers)&lt;/li&gt;
&lt;li&gt;hipsからleft - upper leg - lower leg - foot - (toes)&lt;/li&gt;
&lt;li&gt;hipsからright - upper leg - lower leg - foot - (toes)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;間にヒューマノイドに関係ないノードが入ることは許す(LowerLegの親がemptyでその親がUpperLegであるなど)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;必須でないボーンは飛ばしてよい(UpperArmの親がshoulderじゃなくてchestなど)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;関連イシュー&#34;&gt;関連イシュー&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vrm-c/vrm-specification/issues/87&#34;&gt;https://github.com/vrm-c/vrm-specification/issues/87&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blogs.unity3d.com/jp/2014/05/26/mecanim-humanoids/&#34;&gt;Mecanim Humanoids&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/ousttrue/items/aead1c943855561b62e7&#34;&gt;BlenderからUnityのHumanoid互換でfbxをエクスポートする&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Standard</title>
      <link>https://vrm.dev/docs/univrm/shaders/univrm_standard/</link>
      <pubDate>Tue, 15 Sep 2020 20:06:14 +0900</pubDate>
      
      <guid>https://vrm.dev/docs/univrm/shaders/univrm_standard/</guid>
      <description>
        
        
        &lt;h2 id=&#34;standard&#34;&gt;Standard&lt;/h2&gt;
&lt;p&gt;Unityの&lt;a href=&#34;https://docs.unity3d.com/ja/2019.3/Manual/StandardShaderMaterialParameters.html&#34;&gt;デフォルト&lt;/a&gt;でGLTF標準のPBRマテリアルとほぼ互換性があります。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Unityのデフォルト&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;GLTFのPBRマテリアル&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Albedo カラー&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/materials/pbrMetallicRoughness/baseColorFactor&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Albedo テクスチャ&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/materials/pbrMetallicRoughness/baseColorTexture&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Metallic レベル&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/materials/pbrMetallicRoughness/metallicFactor&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Smoothness レベル&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1.0f - (/materials/pbrMetallicRoughness/roughnessFactor)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Metallic テクスチャ&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/materials/pbrMetallicRoughness/metallicRoughnessTexture&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;法線マップ&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/materials/normalTexture&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;バンプスケール&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/materials/normalTexture/scale&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ハイトマップ&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N/A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;オクルージョンテクスチャ&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/materials/occlusionTexture&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;オクルージョン強度&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/materials/occlusionTexture/strength&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Emission カラー&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/materials/emissiveFactor&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Emission テクスチャ&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/materials/emissiveTexture&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;詳細マスク&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N/A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;セカンダリマップ&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N/A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;レンダリングモード&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;/materials/alphaMode&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;UniVRMのマテリアルインポートに関して、roughnessFactor値はMetallicテクスチャにベイクされる。マテリアルエクスポートではsmoothness値はMetallicテクスチャにベイクされる&lt;a href=&#34;https://github.com/vrm-c/UniVRM/pull/222&#34;&gt;[参照]&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;Unity と GLTF でテクスチャーの仕様に非互換があるので、 &lt;code&gt;export/import&lt;/code&gt; で変換しています。&lt;/p&gt;
&lt;h2 id=&#34;テクスチャ変換&#34;&gt;テクスチャ変換&lt;/h2&gt;
&lt;p&gt;Standardシェーダーのカラー以外のテクスチャ(Linear)の処理について。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ノーマルマップの修正。MToonと共通なので次項で説明します&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Materialのプロパティ名 &lt;code&gt;_BumpMap&lt;/code&gt; で判定します。&lt;/li&gt;
&lt;li&gt;EditorImport: &lt;code&gt;TextureImporterType.NormalMap&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;RuntimeImport: 法線テクスチャのPack&lt;/li&gt;
&lt;li&gt;Export: 法線テクスチャのUnpack&lt;/li&gt;
&lt;li&gt;sRGBとLinearの対応&lt;/li&gt;
&lt;li&gt;Tangentの対応&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Metallic, Roughnes, OcclusionMapの変換&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RGBAチャンネル組み換え&lt;/li&gt;
&lt;li&gt;Roughness値とSmoothness値の反転&lt;/li&gt;
&lt;li&gt;sRGBとLinearの対応&lt;/li&gt;
&lt;li&gt;Importerで変換、Exporterで逆変換&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;トラブルシューティング&#34;&gt;トラブルシューティング&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ピカピカに反射してしまう。
&lt;ul&gt;
&lt;li&gt;Shaderの種類が &lt;code&gt;Standard&lt;/code&gt; (Unityの標準) で &lt;code&gt;metallic&lt;/code&gt; と &lt;code&gt;smooth&lt;/code&gt; 値が高い状態になっています。 マテリアルのシェーダーを &lt;code&gt;Unlit/UniUnlit&lt;/code&gt; にするとテクスチャがそのまま表示できます。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: VRMモデルのファイルサイズ</title>
      <link>https://vrm.dev/docs/univrm/export/vrm_size/</link>
      <pubDate>Thu, 13 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://vrm.dev/docs/univrm/export/vrm_size/</guid>
      <description>
        
        
        &lt;p&gt;VRMは、GLB形式なので、&lt;/p&gt;
&lt;p&gt;&lt;code&gt;VRMエクスポートしたファイルのサイズ =&amp;gt; glb のサイズ&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;glb =&amp;gt; json + binary&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;です。&lt;/p&gt;
&lt;p&gt;json はテキストなので通常は 1MB にもなりません。&lt;/p&gt;
&lt;p&gt;binary で主なものは、&lt;/p&gt;
&lt;p&gt;&lt;code&gt;image&lt;/code&gt; と &lt;code&gt;mesh&lt;/code&gt; です。&lt;/p&gt;
&lt;p&gt;5万頂点、5万三角形のモデルを例としてどれくらいの容量になるかを計算する目安を説明します。&lt;/p&gt;
&lt;h2 id=&#34;image&#34;&gt;Image&lt;/h2&gt;
&lt;p&gt;Material が参照する Texture の PNG(JPG) のバイト列がそのまま入っています。
Meta の Thumbnail も対象になります。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;v0.56 でローカルの元ファイルをそのまま使うようにした結果、
元ファイルが巨大であった場合に、以前に比べて大きくなる問題が発生しています。4000x4000のような大きなファイルはPNG(JPG)を縮小してください。v0.58 修正予定。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/vrm-c/UniVRM/issues/502&#34;&gt;https://github.com/vrm-c/UniVRM/issues/502&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;mesh&#34;&gt;Mesh&lt;/h2&gt;
&lt;p&gt;Index バッファ と 頂点バッファです。&lt;/p&gt;
&lt;h3 id=&#34;indexバッファ&#34;&gt;Indexバッファ&lt;/h3&gt;
&lt;p&gt;Indexバッファは、Intの配列を使っています。&lt;/p&gt;
&lt;p&gt;5万三角形のモデルの場合、&lt;/p&gt;
&lt;p&gt;&lt;code&gt;50000 x 4(Int=4byte) x 3(三角形の3頂点) =&amp;gt; 0.6MB&lt;/code&gt; の容量を使います。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;GLTFの仕様的には unsigned short も可能ですが、UniVRM のエクスポーターは未対応。65536 頂点までなので 50000 三角形は格納できません。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;頂点バッファ&#34;&gt;頂点バッファ&lt;/h3&gt;
&lt;p&gt;一頂点は、&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
    float3 Position; // 頂点位置 4(floatサイズ) x 3(xyz) =&amp;gt; 12byte
    float3 Normal; // 頂点法線 4(floatサイズ) x 3(xyz) =&amp;gt; 12byte
    float2 TEXCOORD_0; // 頂点UV 4(floatサイズ) x 2(xy) =&amp;gt; 8byte
    short4 JOINTS_0; // 頂点BoneIndex 2(shortサイズ) x 4(4boneまで) =&amp;gt; 8byte
    float4 WEIGHTS_0; // 頂点Weight 4(floatサイズ) x 4(4boneまで) =&amp;gt; 16byte
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;となっています。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;頂点カラー、2つめのUV(未対応)などバリエーションがありうる。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;GLTFにはTangent(float4)も保存できますが、UniVRMでは保存せずUnityに計算させています。法線とUVから &lt;code&gt;MIKK T Space&lt;/code&gt; アルゴリズムで計算したものを使う仕様です。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;５万頂点のモデルの場合、&lt;/p&gt;
&lt;p&gt;&lt;code&gt;50000 x (12 + 12 + 8 + 8 + 16) =&amp;gt; 2.8MB&lt;/code&gt; の容量を使います。&lt;/p&gt;
&lt;h2 id=&#34;基本容量&#34;&gt;基本容量&lt;/h2&gt;
&lt;p&gt;以上、 &lt;code&gt;画像サイズ合計 + インデックスバッファ + 頂点バッファ&lt;/code&gt; の合計がモデルの基本容量になります。
5万頂点、5万三角形のモデルの場合、 &lt;code&gt;3.4MB + 画像サイズ合計&lt;/code&gt; が基本容量になります。
基本容量は計算通りの値になります。
以降、時として容量爆発の原因となるブレンドシェイプの容量についてです。&lt;/p&gt;
&lt;h2 id=&#34;ブレンドシェイプmorphtargetの容量&#34;&gt;ブレンドシェイプ(MorphTarget)の容量&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-ブレンドシェイプ頂点&#34; data-lang=&#34;ブレンドシェイプ頂点&#34;&gt;{
    float3 Position; // 頂点位置 4 x 3 =&amp;gt; 12byte. 必須
    float3 Normal; // 頂点法線 4 x 3 =&amp;gt; 12byte. オプション
    float3 Tangent; // 頂点Tangent 4 x 3 =&amp;gt; 12byte. 記録しない
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ひとつのブレンドシェイプで &lt;code&gt;50000 x (12 + 12) =&amp;gt; 1.2MB&lt;/code&gt; の容量を使います。&lt;/p&gt;
&lt;p&gt;20のブレンドシェイプがあったとすると,
&lt;code&gt;50000 x (12 + 12) x 20 =&amp;gt; 24MB&lt;/code&gt; の容量を使います。&lt;/p&gt;
&lt;p&gt;60のブレンドシェイプがあると、
&lt;code&gt;50000 x (12 + 12) x 60 =&amp;gt; 72MB&lt;/code&gt; の容量を使います。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;大量のBlendShapeがある&lt;/li&gt;
&lt;li&gt;BlendShapeのある場所と無い場所が分割されていない&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;の条件が揃うと大容量になることに注意してください。
以降、ブレンドシェイプ容量の削減方法についてです。&lt;/p&gt;
&lt;h3 id=&#34;ブレンドシェイプの容量対策&#34;&gt;ブレンドシェイプの容量対策&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://vrm.dev/docs/univrm/export/univrm_export/&#34;&gt;エクスポートダイアログ&lt;/a&gt;
の以下のオプションがブレンドシェイプの容量に関連します。&lt;/p&gt;
&lt;h4 id=&#34;エクスポートオプション&#34;&gt;エクスポートオプション&lt;/h4&gt;
&lt;p&gt;最初の２つは安全にです。３つめは修正中。4つめは、UniVRM-0.53(含む)以前でロードエラーになるバージョン問題があります。&lt;/p&gt;
&lt;h5 id=&#34;reduceblendshape&#34;&gt;ReduceBlendshape&lt;/h5&gt;
&lt;p&gt;BlendShapeClip設定から参照されないBlendShapeをエクスポートしない。
ファイルサイズを削減できます。&lt;/p&gt;
&lt;h5 id=&#34;reduceblendshapeclip&#34;&gt;ReduceBlendshapeClip&lt;/h5&gt;
&lt;p&gt;Presetが Unknown であるBlendShapeClipをエクスポートしない。
ReduceBlendshapeと組み合わせて使います。&lt;/p&gt;
&lt;h5 id=&#34;usesparseaccessor&#34;&gt;UseSparseAccessor&lt;/h5&gt;
&lt;p&gt;BlendShapeが多数ある場合にファイルサイズを削減できます。&lt;/p&gt;
&lt;p&gt;ブレンドシェイプの値が、 &lt;code&gt;0&lt;/code&gt; でない頂点のみを飛び飛びに記録することで容量を削減する GLTF の仕様です。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;修正中: GLTFの互換性の問題があって、UniVRM以外のローダーでエラーになる&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-ブレンドシェイプ頂点&#34; data-lang=&#34;ブレンドシェイプ頂点&#34;&gt;{
    int Index; // 有効なブレンドシェイプの index =&amp;gt; 4
    float3 Position; // 頂点位置 4 x 3 =&amp;gt; 12byte. 必須
    float3 Normal; // 頂点法線 4 x 3 =&amp;gt; 12byte. オプション
    float3 Tangent; // 頂点Tangent 4 x 3 =&amp;gt; 12byte. 記録しない
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;BlendShapeの有効な頂点数 x (12 + 12 + 4) =&amp;gt; ?MB&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;保存方法だけ変わる&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;onlyblendshapeposition&#34;&gt;OnlyBlendshapePosition&lt;/h5&gt;
&lt;p&gt;BlendShapeのNormal, Tangent をエクスポートしない。
ファイルサイズを削減できます。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;UniVRM-0.53 より前のバージョンはインポート時にエラーになるのに注意してください。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;meshutility-で-blendshape-の-あるmesh-と-ないmesh-に分割する&#34;&gt;MeshUtility で BlendShape の あるMesh と ないMesh に分割する&lt;/h4&gt;
&lt;p&gt;例えば、顔(BlendShapeあり)が 10000 頂点、体(BlendShapeなし)が 40000 頂点に分割されていると、&lt;/p&gt;
&lt;p&gt;ひとつのブレンドシェイプで &lt;code&gt;10000 x (12 + 12) =&amp;gt; 0.24MB&lt;/code&gt; の容量を使います。&lt;/p&gt;
&lt;p&gt;分割前の一体型のモデル&lt;/p&gt;
&lt;p&gt;&lt;code&gt;50000 x (12 + 12) =&amp;gt; 1.2MB&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;に比べて容量を節約できます。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ランタイムにも良い可能性があるが、ドローコールは増えるかもしれないのでトレードオフがある&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://vrm.dev/docs/univrm/gltf/mesh_utility/&#34;&gt;Mesh Utility&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;予想より大容量になってしまうときはブレンドシェイプ、次に画像に注意してください。&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
